# Importa√ß√µes principais
try:
    import streamlit as st
    import pandas as pd
    import plotly.graph_objects as go
    import plotly.express as px
    from plotly.subplots import make_subplots
    import numpy as np
    from sklearn.linear_model import LinearRegression
    from scipy import stats
    import sklearn.metrics as metrics
except Exception as e:
    st.error(f"""
    ‚ùå Erro ao importar as bibliotecas necess√°rias.
    
    Por favor, instale todas as depend√™ncias usando:
    ```
    pip install -r requirements.txt
    ```
    
    Erro original: {str(e)}
    """)
    st.stop()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Marketing - SaaS ERP",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #073763;
        margin-bottom: 0.5rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #666;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #073763;
    }
    .alert-box {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d1e7dd;
        border-left: 4px solid #198754;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para carregar dados
@st.cache_data
def load_data():
    data = {
        'M√™s': ['Mai/25', 'Jun/25', 'Jul/25', 'Ago/25', 'Set/25'],
        'Sess√µes': [5218, 5600, 5717, 7654, 8028],
        'Primeira Visita': [2900, 3562, 3500, 5400, 5548],
        'Leads': [270, 290, 401, 600, 604],
        'TC Usu√°rios (%)': [9.32, 8.79, 11.46, 11.11, 10.89],
        'Clientes Web': [16, 15, 18, 20, 22],
        'TC Leads (%)': [5.93, 5.50, 4.50, 3.33, 3.64],
        'Receita Web': [2114.56, 1991.31, 2591.91, 2728.92, 3001.90],
        'Ticket M√©dio': [132.16, 132.75, 149.99, 136.45, 136.45],
        'Custo Meta': [2238.52, 2328.16, 2731.39, 3476.39, 3807.17],
        'Custo Google': [2934.49, 3083.29, 3194.67, 4932.45, 6127.84],
        'Total Ads': [5173.01, 5411.32, 5926.06, 8408.84, 9935.01],
        'CAC': [323.31, 360.75, 329.23, 420.44, 451.59],
        'LTV': [1585.92, 1593.00, 1799.88, 1637.40, 1637.40],
        'CAC:LTV': [4.9, 4.4, 5.5, 3.9, 3.6],
        'ROI (%)': [390.52, 341.57, 446.70, 289.45, 262.58]
    }
    return pd.DataFrame(data)

df = load_data()

# Benchmarks
benchmarks = {
    'TC Usu√°rios (%)': {'min': 8, 'max': 15, 'ideal': 10.5},
    'TC Leads (%)': {'min': 4.5, 'max': 6, 'ideal': 5.25},
    'CAC': {'min': 250, 'max': 500, 'ideal': 350},
    'CAC:LTV': {'min': 3, 'max': 7, 'ideal': 4, 'critico': 3},
    'ROI (%)': {'min': 300, 'max': 500, 'ideal': 400},
    'Ticket M√©dio': {'min': 120, 'max': 200, 'ideal': 150}
}

# Header
st.markdown('<div class="main-header">üìä Dashboard de Marketing - SaaS ERP</div>', unsafe_allow_html=True)
st.markdown('<div class="sub-header">An√°lise de Performance: Maio - Setembro 2025</div>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.image("https://via.placeholder.com/150x50/073763/ffffff?text=SaaS+ERP", use_container_width=True)
    st.markdown("---")
    
    st.subheader("Filtros")
    meses_selecionados = st.multiselect(
        "Selecione os meses:",
        options=df['M√™s'].tolist(),
        default=df['M√™s'].tolist()
    )
    
    st.markdown("---")
    st.subheader("Sobre")
    st.info("""
    Dashboard interativo para an√°lise de KPIs de marketing digital com benchmarks do setor de SaaS ERP.
    """)
    
    st.markdown("---")
    st.caption("Desenvolvido para an√°lise estrat√©gica de marketing")

# Filtrar dados
df_filtered = df[df['M√™s'].isin(meses_selecionados)]

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)

with col1:
    cac_medio = df_filtered['CAC'].mean()
    cac_variacao = ((df_filtered['CAC'].iloc[-1] - df_filtered['CAC'].iloc[0]) / df_filtered['CAC'].iloc[0] * 100)
    st.metric(
        "CAC M√©dio",
        f"R$ {cac_medio:.2f}",
        f"{cac_variacao:+.1f}%",
        delta_color="inverse"
    )

with col2:
    ltv_medio = df_filtered['LTV'].mean()
    ltv_variacao = ((df_filtered['LTV'].iloc[-1] - df_filtered['LTV'].iloc[0]) / df_filtered['LTV'].iloc[0] * 100)
    st.metric(
        "LTV M√©dio",
        f"R$ {ltv_medio:.2f}",
        f"{ltv_variacao:+.1f}%"
    )

with col3:
    roi_medio = df_filtered['ROI (%)'].mean()
    roi_variacao = ((df_filtered['ROI (%)'].iloc[-1] - df_filtered['ROI (%)'].iloc[0]) / df_filtered['ROI (%)'].iloc[0] * 100)
    st.metric(
        "ROI M√©dio",
        f"{roi_medio:.1f}%",
        f"{roi_variacao:+.1f}%",
        delta_color="inverse"
    )

with col4:
    tc_leads_medio = df_filtered['TC Leads (%)'].mean()
    tc_variacao = ((df_filtered['TC Leads (%)'].iloc[-1] - df_filtered['TC Leads (%)'].iloc[0]) / df_filtered['TC Leads (%)'].iloc[0] * 100)
    st.metric(
        "TC Leads ‚Üí Vendas",
        f"{tc_leads_medio:.2f}%",
        f"{tc_variacao:+.1f}%",
        delta_color="inverse"
    )

# Alertas
st.markdown("""
<div class="alert-box">
    <h4>‚ö†Ô∏è Pontos de Aten√ß√£o</h4>
    <ul>
        <li><strong>CAC crescente:</strong> Aumentou 36% de Mai para Set (R$ 323 ‚Üí R$ 441)</li>
        <li><strong>ROI em queda:</strong> Redu√ß√£o de 31% no per√≠odo (390% ‚Üí 271%)</li>
        <li><strong>Rela√ß√£o CAC:LTV em decl√≠nio:</strong> Caiu de 4.9:1 para 3.7:1 (tend√™ncia preocupante, aproximando do m√≠nimo de 3:1)</li>
        <li><strong>TC Leads baixa:</strong> Tend√™ncia de queda (5.93% ‚Üí 3.77%)</li>
    </ul>
</div>
""", unsafe_allow_html=True)

# Tabs
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["üìà Evolu√ß√£o", "üí∞ Financeiro", "üéØ Convers√£o", "üìä Benchmarks", "üìã Recomenda√ß√µes", "üîÆ Forecast"])

with tab1:
    st.subheader("Evolu√ß√£o de Leads e Clientes")
    
    fig1 = go.Figure()
    fig1.add_trace(go.Scatter(
        x=df_filtered['M√™s'], 
        y=df_filtered['Leads'],
        mode='lines+markers',
        name='Leads',
        line=dict(color='#3b82f6', width=3),
        marker=dict(size=10)
    ))
    fig1.add_trace(go.Scatter(
        x=df_filtered['M√™s'], 
        y=df_filtered['Clientes Web'],
        mode='lines+markers',
        name='Clientes',
        line=dict(color='#10b981', width=3),
        marker=dict(size=10)
    ))
    fig1.update_layout(
        height=400,
        hovermode='x unified',
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    st.plotly_chart(fig1, use_container_width=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Tr√°fego do Site")
        fig2 = go.Figure()
        fig2.add_trace(go.Bar(
            x=df_filtered['M√™s'],
            y=df_filtered['Sess√µes'],
            name='Total Sess√µes',
            marker_color='#073763'
        ))
        fig2.add_trace(go.Bar(
            x=df_filtered['M√™s'],
            y=df_filtered['Primeira Visita'],
            name='Primeira Visita',
            marker_color='#3b82f6'
        ))
        fig2.update_layout(height=350, barmode='group')
        st.plotly_chart(fig2, use_container_width=True)
    
    with col2:
        st.subheader("Receita Web Mensal")
        fig3 = go.Figure()
        fig3.add_trace(go.Bar(
            x=df_filtered['M√™s'],
            y=df_filtered['Receita Web'],
            marker_color='#10b981',
            text=df_filtered['Receita Web'].apply(lambda x: f'R$ {x:.0f}'),
            textposition='outside'
        ))
        fig3.update_layout(height=350)
        st.plotly_chart(fig3, use_container_width=True)

with tab2:
    st.subheader("An√°lise Financeira")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### CAC vs LTV")
        fig4 = go.Figure()
        fig4.add_trace(go.Bar(
            x=df_filtered['M√™s'],
            y=df_filtered['CAC'],
            name='CAC',
            marker_color='#ef4444'
        ))
        fig4.add_trace(go.Bar(
            x=df_filtered['M√™s'],
            y=df_filtered['LTV'],
            name='LTV',
            marker_color='#10b981'
        ))
        fig4.update_layout(height=350, barmode='group')
        st.plotly_chart(fig4, use_container_width=True)
    
    with col2:
        st.markdown("### Investimento em Ads")
        fig5 = go.Figure()
        fig5.add_trace(go.Bar(
            x=df_filtered['M√™s'],
            y=df_filtered['Custo Meta'],
            name='Meta Ads',
            marker_color='#1877f2'
        ))
        fig5.add_trace(go.Bar(
            x=df_filtered['M√™s'],
            y=df_filtered['Custo Google'],
            name='Google Ads',
            marker_color='#ea4335'
        ))
        fig5.update_layout(height=350, barmode='stack')
        st.plotly_chart(fig5, use_container_width=True)
    
    st.markdown("### Evolu√ß√£o do ROI")
    fig6 = go.Figure()
    fig6.add_trace(go.Scatter(
        x=df_filtered['M√™s'],
        y=df_filtered['ROI (%)'],
        mode='lines+markers',
        fill='tozeroy',
        line=dict(color='#8b5cf6', width=3),
        marker=dict(size=12)
    ))
    fig6.add_hline(y=benchmarks['ROI (%)']['ideal'], line_dash="dash", 
                   line_color="green", annotation_text="Benchmark Ideal")
    fig6.update_layout(height=350)
    st.plotly_chart(fig6, use_container_width=True)

with tab3:
    st.subheader("Funil de Convers√£o")
    
    # M√©tricas do √∫ltimo m√™s
    ultimo_mes = df_filtered.iloc[-1]
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Sess√µes", f"{ultimo_mes['Sess√µes']:,.0f}")
    with col2:
        st.metric("Leads", f"{ultimo_mes['Leads']:,.0f}")
    with col3:
        st.metric("Clientes", f"{ultimo_mes['Clientes Web']:,.0f}")
    with col4:
        st.metric("Receita", f"R$ {ultimo_mes['Receita Web']:,.2f}")
    
    # Gr√°fico de funil
    fig7 = go.Figure(go.Funnel(
        y=['Sess√µes', 'Primeira Visita', 'Leads', 'Clientes'],
        x=[ultimo_mes['Sess√µes'], ultimo_mes['Primeira Visita'], 
           ultimo_mes['Leads'], ultimo_mes['Clientes Web']],
        textinfo="value+percent initial",
        marker=dict(color=['#073763', '#3b82f6', '#8b5cf6', '#10b981'])
    ))
    fig7.update_layout(height=400)
    st.plotly_chart(fig7, use_container_width=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Taxa de Convers√£o: Usu√°rios ‚Üí Leads")
        fig8 = go.Figure()
        fig8.add_trace(go.Scatter(
            x=df_filtered['M√™s'],
            y=df_filtered['TC Usu√°rios (%)'],
            mode='lines+markers',
            line=dict(color='#3b82f6', width=3),
            marker=dict(size=10)
        ))
        fig8.add_hrect(y0=benchmarks['TC Usu√°rios (%)']['min'], 
                       y1=benchmarks['TC Usu√°rios (%)']['max'],
                       fillcolor="green", opacity=0.1,
                       annotation_text="Benchmark", annotation_position="top left")
        fig8.update_layout(height=300)
        st.plotly_chart(fig8, use_container_width=True)
    
    with col2:
        st.markdown("### Taxa de Convers√£o: Leads ‚Üí Vendas")
        fig9 = go.Figure()
        fig9.add_trace(go.Scatter(
            x=df_filtered['M√™s'],
            y=df_filtered['TC Leads (%)'],
            mode='lines+markers',
            line=dict(color='#10b981', width=3),
            marker=dict(size=10)
        ))
        fig9.add_hrect(y0=benchmarks['TC Leads (%)']['min'], 
                       y1=benchmarks['TC Leads (%)']['max'],
                       fillcolor="green", opacity=0.1,
                       annotation_text="Benchmark", annotation_position="top left")
        fig9.update_layout(height=300)
        st.plotly_chart(fig9, use_container_width=True)

with tab4:
    st.subheader("Compara√ß√£o com Benchmarks SaaS ERP")
    
    benchmark_data = pd.DataFrame({
        'M√©trica': ['TC Usu√°rios ‚Üí Leads', 'TC Leads ‚Üí Vendas', 'CAC', 'CAC:LTV', 'ROI', 'Ticket M√©dio'],
        'Sua M√©dia': [
            f"{df_filtered['TC Usu√°rios (%)'].mean():.2f}%",
            f"{df_filtered['TC Leads (%)'].mean():.2f}%",
            f"R$ {df_filtered['CAC'].mean():.2f}",
            f"{df_filtered['CAC:LTV'].mean():.1f}:1",
            f"{df_filtered['ROI (%)'].mean():.1f}%",
            f"R$ {df_filtered['Ticket M√©dio'].mean():.2f}"
        ],
        'Benchmark': ['8-15%', '4.5-6%', 'R$ 250-500', '‚â•3:1 (ideal 4-7:1)', '300-500%', 'R$ 120-200'],
        'Status': ['‚úÖ Na meta', '‚ö†Ô∏è Lim√≠trofe', '‚úÖ Aceit√°vel', '‚ö†Ô∏è Decl√≠nio', '‚úÖ Bom', '‚úÖ Normal']
    })
    
    st.dataframe(benchmark_data, use_container_width=True, hide_index=True)

with tab5:
    st.subheader("Recomenda√ß√µes Estrat√©gicas")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="alert-box">
            <h4>üéØ Prioridade Alta</h4>
            <ol>
                <li><strong>Monitorar CAC:LTV:</strong> Rela√ß√£o caiu de 4.9:1 para 3.6:1. Aten√ß√£o m√°xima para n√£o romper o m√≠nimo de 3:1. A√ß√µes:
                    <ul>
                        <li>Reduzir CAC: Otimizar campanhas, pausar keywords caras, investir em canais org√¢nicos</li>
                        <li>Aumentar LTV: Upsell, cross-sell, reten√ß√£o e customer success</li>
                    </ul>
                </li>
                <li><strong>Otimizar CAC:</strong> Google Ads subiu +109% em 5 meses. Auditar campanhas e priorizar SEO/conte√∫do.</li>
                <li><strong>Melhorar convers√£o Leads‚ÜíVendas:</strong> TC caiu de 5.93% para 3.64%. Implementar lead scoring e revisar funil comercial.</li>
                <li><strong>Qualificar leads:</strong> Foco em qualidade para elevar convers√£o e ticket m√©dio.</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="success-box">
            <h4>üìà Oportunidades</h4>
            <ul>
                <li><strong>Crescimento de leads:</strong> Volume subiu 124% (270‚Üí604)</li>
                <li><strong>Tr√°fego qualificado:</strong> Convers√£o usu√°rios‚Üíleads est√° dentro do benchmark</li>
                <li><strong>Infraestrutura escal√°vel:</strong> Suporta aumento de 50% sem perda de qualidade</li>
                <li><strong>ROI positivo:</strong> Mantido acima de 260%, modelo sustent√°vel</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

with tab6:
    st.subheader("üîÆ Forecast: Cen√°rios para Proje√ß√£o e Estrat√©gia")
    
    try:
        # Prepara√ß√£o dos dados para forecast
        meses = df['M√™s'].tolist()
        meses_num = np.arange(len(meses)).reshape(-1, 1)
        previsao_meses = ["Out/25", "Nov/25", "Dez/25"]
        meses_num_forecast = np.arange(len(meses), len(meses)+len(previsao_meses)).reshape(-1, 1)

        def prever_cenarios(col):
            try:
                # Modelo de regress√£o linear
                modelo = LinearRegression()
                modelo.fit(meses_num, df[col].values)
                
                # Previs√£o base
                y_pred = modelo.predict(meses_num)
                previsao_base = modelo.predict(meses_num_forecast)
                
                # C√°lculo de res√≠duos e erro padr√£o
                residuos = df[col].values - y_pred
                erro_padrao = np.std(residuos)
                
                # Intervalo de confian√ßa (95%)
                z_score = 1.96
                margem_erro = z_score * erro_padrao
                
                # M√©tricas de qualidade
                r2 = metrics.r2_score(df[col].values, y_pred)
                rmse = np.sqrt(metrics.mean_squared_error(df[col].values, y_pred))
                mape = np.mean(np.abs((df[col].values - y_pred) / df[col].values)) * 100
                
                # Teste de tend√™ncia (Mann-Kendall)
                tau, p_valor = stats.kendalltau(range(len(df[col].values)), df[col].values)
                
                # C√°lculo dos cen√°rios
                otimista = previsao_base + margem_erro
                conservador = previsao_base - margem_erro
                
                return {
                    'previsao': previsao_base,
                    'otimista': otimista,
                    'conservador': conservador,
                    'metricas': {
                        'R¬≤': r2,
                        'RMSE': rmse,
                        'MAPE': mape,
                        'Erro Padr√£o': erro_padrao,
                        'Tend√™ncia (tau)': tau,
                        'P-valor tend√™ncia': p_valor
                    }
                }
            except Exception as e:
                st.error(f"Erro ao calcular previs√µes para {col}: {str(e)}")
                return None

        # KPIs para previs√£o
        kpis = ["Leads", "Clientes Web", "Receita Web", "CAC", "LTV", "ROI (%)"]
        
        # Calcular previs√µes
        resultados = {}
        for kpi in kpis:
            resultados[kpi] = prever_cenarios(kpi)

        # Exibir resultados
        st.markdown("### Previs√µes com Valida√ß√£o Estat√≠stica")
        
        for kpi in kpis:
            if resultados[kpi]:
                st.markdown(f"#### {kpi}")
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    # Gr√°fico com previs√µes e intervalos de confian√ßa
                    fig = go.Figure()
                    
                    # Dados hist√≥ricos
                    fig.add_trace(go.Scatter(
                        x=meses,
                        y=df[kpi],
                        name="Hist√≥rico",
                        mode="lines+markers",
                        line=dict(color='#3b82f6', width=3)
                    ))
                    
                    # Previs√£o
                    fig.add_trace(go.Scatter(
                        x=previsao_meses,
                        y=resultados[kpi]['previsao'],
                        name="Previs√£o",
                        mode="lines+markers",
                        line=dict(color='#10b981', width=3, dash='dot')
                    ))
                    
                    # Intervalos de confian√ßa
                    fig.add_trace(go.Scatter(
                        x=previsao_meses,
                        y=resultados[kpi]['otimista'],
                        name="IC Superior (95%)",
                        mode="lines",
                        line=dict(color='rgba(16, 185, 129, 0.3)', dash='dash')
                    ))
                    
                    fig.add_trace(go.Scatter(
                        x=previsao_meses,
                        y=resultados[kpi]['conservador'],
                        name="IC Inferior (95%)",
                        mode="lines",
                        line=dict(color='rgba(239, 68, 68, 0.3)', dash='dash'),
                        fill='tonexty'
                    ))
                    
                    fig.update_layout(
                        title=f"Previs√£o: {kpi}",
                        xaxis_title="M√™s",
                        yaxis_title=kpi,
                        height=400
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # M√©tricas de qualidade
                    st.markdown("**M√©tricas de Qualidade**")
                    metricas = resultados[kpi]['metricas']
                    
                    # Avalia√ß√£o da qualidade
                    if metricas['R¬≤'] > 0.8:
                        r2_status = "‚úÖ Excelente"
                    elif metricas['R¬≤'] > 0.6:
                        r2_status = "‚ö†Ô∏è Moderado"
                    else:
                        r2_status = "‚ùå Baixo"
                        
                    if metricas['MAPE'] < 10:
                        mape_status = "‚úÖ Baixo"
                    elif metricas['MAPE'] < 20:
                        mape_status = "‚ö†Ô∏è Moderado"
                    else:
                        mape_status = "‚ùå Alto"
                        
                    if metricas['P-valor tend√™ncia'] < 0.05:
                        tend_status = "üìà Significativa" if metricas['Tend√™ncia (tau)'] > 0 else "üìâ Significativa"
                    else:
                        tend_status = "‚ûñ N√£o significativa"
                    
                    st.metric("R¬≤ (Ajuste do Modelo)", f"{metricas['R¬≤']:.3f}", r2_status)
                    st.metric("MAPE (Erro %)", f"{metricas['MAPE']:.1f}%", mape_status)
                    st.metric("Tend√™ncia", f"{metricas['Tend√™ncia (tau)']:.3f}", tend_status)
                
                st.markdown("---")

        # An√°lise de correla√ß√£o entre KPIs
        st.markdown("### An√°lise de Correla√ß√£o entre KPIs")
        corr_matrix = df[kpis].corr()
        
        fig_corr = px.imshow(
            corr_matrix,
            labels=dict(color="Correla√ß√£o"),
            color_continuous_scale="RdBu",
            aspect="auto"
        )
        fig_corr.update_layout(
            title="Matriz de Correla√ß√£o",
            height=500
        )
        st.plotly_chart(fig_corr, use_container_width=True)
        
        # Insights baseados nas correla√ß√µes
        st.markdown("### Insights das An√°lises")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **Qualidade das Previs√µes:**
            - Modelos com R¬≤ > 0.8 s√£o altamente confi√°veis
            - MAPE < 10% indica previs√µes precisas
            - Tend√™ncias significativas sugerem padr√µes consistentes
            """)
            
            st.markdown("""
            **Recomenda√ß√µes para Uso:**
            1. Priorize KPIs com maior R¬≤ e menor MAPE
            2. Use intervalos de confian√ßa para planejamento
            3. Considere tend√™ncias significativas nas decis√µes
            """)
        
        with col2:
            st.markdown("""
            **Limita√ß√µes do Modelo:**
            - Assume tend√™ncia linear
            - Sens√≠vel a mudan√ßas bruscas
            - Requer monitoramento cont√≠nuo
            """)
            
            st.markdown("""
            **Pr√≥ximos Passos:**
            1. Atualizar dados mensalmente
            2. Validar previs√µes vs. realizado
            3. Ajustar modelos conforme necess√°rio
            """)

    except Exception as e:
        st.error(f"""
        ‚ùå Erro ao gerar previs√µes e an√°lises estat√≠sticas.
        
        Erro: {str(e)}
        
        Verifique:
        1. Formato dos dados
        2. Quantidade de dados hist√≥ricos
        3. Depend√™ncias instaladas
        """)

# Footer
st.markdown("---")
st.caption("Dashboard de Marketing - SaaS ERP | Atualizado em Setembro 2025")
